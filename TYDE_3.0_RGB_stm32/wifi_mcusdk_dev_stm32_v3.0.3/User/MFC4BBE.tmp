/******************************************************************************
版权所有 (C), 2015-2020, 涂鸦科技
版本:v1.2
修改时间:
修改内容:
******************************************************************************/


#include "protocol.h"

u8                          Package_Flag;                             
u8                          UART_Flag1;
u8                          UART_Flag2;
u8                          UART_Count;                               
u8                          UART_Cmd_len;                           
u8 wifi_uart_rx_buf[WIFI_UART_RECV_BUF_LMT];            //串口接收缓存
u8 wifi_uart_tx_buf[WIFIR_UART_SEND_BUF_LMT];           //串口发送缓存
FUNCTION_CB                 uart_receive_function;
FUNCTION_CB                 uart_send_function;



/*****************************************************************************
函数名称  : int2char
功能描述  : 将int类型拆分四个字节
输入参数 :
返回参数 :
****************************************************************************/
static void int2char(u32 number,u8 value[4])
{
  value[0] = number >> 24;
  value[1] = number >> 16;
  value[2] = number >> 8;
  value[3] = number & 0xff;
}
/*****************************************************************************
函数名称  : char_combine_int
功能描述  : char组合成int类型
输入参数 :
返回参数 :
*****************************************************************************/
static u32 char_combine_int(u8 a,u8 b, u8 c,u8 d)
{
  u32 combine_data = 0;
  
  combine_data = (a << 24);
  combine_data |= (b << 16);
  combine_data |= (c << 8);
  combine_data |= (d & 0xff);
  
  return combine_data;
}
/*****************************************************************************
函数名称  : my_strlen
功能描述  : 求字符串长度
输入参数 :
返回参数 :
*****************************************************************************/
static u32 my_strlen(u8 *str)  
{
  u32 len = 0;
  if(str == NULL)
  { 
    return 0;
  }
  
  for(len = 0; *str++ != '\0'; )
  {
    len ++;
  }
  
  return len;
}
/*****************************************************************************
函数名称  : get_check_sum
功能描述  : 计算校验和
输入参数 :
返回参数 :
*****************************************************************************/
static u8 get_check_sum(u8 *pack, u16 pack_len)
{
  u16 i;
  u8 check_sum = 0;
  
  for(i = 0; i < pack_len; i ++)
  {
    check_sum += *pack ++;
  }
  
  return check_sum;
}

/*****************************************************************************
函数名称  : uchar_change
功能描述  : 拆分字节
*****************************************************************************/
static void uchar_change(u32 temp, u8* hight, u8* low)
{
  *hight = (temp & 0xff00) >> 8;
  *low = temp & 0xff;
}
/*****************************************************************************
函数名称  : uchar_combine
功能描述  : 合并字节
输入参数 :
返回参数 :
*****************************************************************************/
static u16 char_combine_short(u8 hight, u8 low)
{
  u16 combine_data = 0;
  
  combine_data = (hight << 8);
  combine_data |= (low & 0xff);
  
  return combine_data;
}
/*****************************************************************************
函数名称  : my_memset
功能描述  : 把src所指内存区域的前count个字节设置成字符c
输入参数 :
返回参数 :
*****************************************************************************/
static void *my_memset(void *src,u8 ch,u16 count)
{
  u8 *tmp = (u8 *)src;
  
  if(src == NULL)
  {
    return NULL;
  }
  
  while(count --)
  {
    *tmp ++ = ch;
  }
  
  return src;
}
/*****************************************************************************
函数名称  : mymemcpy
功能描述  : 内存拷贝
输入参数 :
返回参数 :
*****************************************************************************/
void *my_memcpy(void *dest, const void *src, u16 count)  
{  
  u8 *pdest = (u8 *)dest;  
  const u8 *psrc  = (const u8 *)src;  
  u16 i;
  
  if(dest == NULL || src == NULL)
  { 
    return NULL;
  }
  
  if((pdest <= psrc) || (pdest > psrc + count))
  {  
    for(i = 0; i < count; i ++)
    {  
      pdest[i] = psrc[i];  
    }  
  }
  else
  {
    for(i = count; i > 0; i --)
    {  
      pdest[i - 1] = psrc[i - 1];  
    }  
  }  
  
  return dest;  
}

/*****************************************************************************
函数名称 : set_wifi_uart_buffer
功能描述 : 写wifi_uart_buffer
输入参数 :
返回参数 :
*****************************************************************************/
u16 set_wifi_uart_buffer(u16 dest, u8 *src, u8 len)
{
  u8 *obj = wifi_uart_tx_buf + dest;
  
  my_memcpy(obj,src,len);
  
  dest += len;
  return dest;
}
/*****************************************************************************
函数名称  : clean_receive_buf
功能描述  : 清理接收缓存
*****************************************************************************/
void clean_receive_buf(void)
{
  UART_HandleStruct.Package_Flag = 0;
  UART_HandleStruct.UART_Count= 0;
  UART_HandleStruct.UART_Flag1 = 0;
  UART_HandleStruct.UART_Flag2 = 0;
  UART_HandleStruct.UART_Cmd_len = 0;
  my_memset(UART_HandleStruct.wifi_uart_rx_buf, 0, WIFI_UART_RECV_BUF_LMT);
}
/*****************************************************************************
函数名称  : clean_send_buf
功能描述  : 清理发送缓存
*****************************************************************************/
void clean_send_buf(void)
{
  my_memset(wifi_uart_tx_buf, 0, WIFIR_UART_SEND_BUF_LMT);
}
/*****************************************************************************
函数名称  : wifi_uart_write_data
功能描述  : 向wifi uart写入连续数据
*****************************************************************************/
void wifi_uart_write_data(u8 *in,u32 in_len)
{
  if((NULL == in) || (0 == in_len))
  {
    return;
  }
  
  while(in_len)
  {
    //mcu和wifi模块连接的串口,用户修改
    uart_send_function(*in);
    in ++;
    in_len --;
  }
}

/*****************************************************************************
函数名称  : wifi_uart_write_frame
功能描述  : 向wifi串口发送一帧数据

*****************************************************************************/
void wifi_uart_write_frame(FRAME_TYPE_E fr_type, u16 len)
{
  u8 check_sum = 0;
  
  len += 7;
  wifi_uart_tx_buf[HEAD_FIRST] = 0x55;
  wifi_uart_tx_buf[HEAD_SECOND] = 0xaa;
  wifi_uart_tx_buf[PROTOCOL_VERSION] = 0x00;
  wifi_uart_tx_buf[FRAME_TYPE] = fr_type;
  wifi_uart_tx_buf[LENGTH_HIGH] = len >> 8;
  wifi_uart_tx_buf[LENGTH_LOW] = len & 0xff;

  check_sum = get_check_sum(wifi_uart_tx_buf, send_len - 1);
  wifi_uart_tx_buf[send_len - 1] = check_sum;
  //
  wifi_uart_write_data(wifi_uart_tx_buf, send_len);
  clean_send_buf();
}

/*****************************************************************************
函数名称 : heat_beat_check
功能描述 : 心跳包检测
输入参数 :
返回参数 :
*****************************************************************************/
void heat_beat_check(void)
{
  u8 tmp_data,tmp_length;
  static u8 mcu_reset_state = FALSE;
  
  if(FALSE == mcu_reset_state)
  {
    tmp_data = 0x00;
    mcu_reset_state = TRUE;
  }
  else
  {
    tmp_data = 0x01;
  }
  
  tmp_length = 1;
  wifi_uart_write_frame(HEAT_BEAT_CMD, tmp_length, &tmp_data);
}

/*****************************************************************************
函数名称  : product_info_update
功能描述  : 产品信息上传
输入参数 :
返回参数 :
*****************************************************************************/
void product_info_update(void)
{
  u8 tmp_length = 0;

  tmp_length = set_wifi_uart_buffer(tmp_length,PRODUCT_KEY,my_strlen(PRODUCT_KEY));
  tmp_length = set_wifi_uart_buffer(tmp_length,MCU_VER,my_strlen(MCU_VER));
  
  wifi_uart_write_frame(PRODUCT_INFO_CMD, tmp_length);
}
/*****************************************************************************
函数名称 : mcu_wifi_mode
功能描述 : mcu和wifi的联合工作模式
输入参数 :
返回参数 :
*****************************************************************************/
void mcu_wifi_mode(void)
{
  u8 tmp_data[2];
  u8 tmp_length =0;

#ifdef UNION_WORK_MODE
  tmp_length = 0;
  tmp_data[0]= 0;
#else
  tmp_length  = 2;
  tmp_data[0] = WF_STATE_KEY;
  tmp_data[1] = WF_RESERT_KEY;
#endif

  wifi_uart_write_frame(WORK_MODE_CMD, tmp_length, tmp_data);
}
/*****************************************************************************
函数名称 : wifi_state_mode
功能描述 : wifi的工作模式
输入参数 : 无
返回参数 : 无
*****************************************************************************/
void wifi_state_mode(void)
{
  u8 tmp_data = 0;
  u8 tmp_length = 0;

  wifi_uart_write_frame(WIFI_STATE_CMD, tmp_length, &tmp_data);
}
/*****************************************************************************
函数名称  :dp_data_update
功能描述  : 单个dpid数据上传
输入参数 : 无
返回参数 : 无
*****************************************************************************/
void dp_data_update(u8 dpid)
{
  u8 tmp_data[64];
  FRAME_TYPE_E tmp_type;
  u8 tmp_length =0;
  u8 total_length = 0;
  u8 j = 0;
  u8 ret = 0;
  DATA_POINT_S data_point_tmp_out;
  
  tmp_type = STATE_UPLOAD_CMD;
  ret = data_point_update(dpid, &data_point_tmp_out);
  if(SUCCESS == ret)
  {
    tmp_length = char_combine_short(data_point_tmp_out.length[0], data_point_tmp_out.length[1]);
    my_memcpy(tmp_data+j, &data_point_tmp_out,4+tmp_length);
    j = j+ tmp_length+4;
    total_length  = j;
  }else{
    ;
  }          
  wifi_uart_write_frame(tmp_type, total_length, tmp_data);
  
}
/*****************************************************************************
函数名称 : system_data_update
功能描述 : 系统所有dp点信息上传
输入参数 : 无
返回参数 : 无
*****************************************************************************/
void system_data_update(void)
{
  u8 tmp_data[64];
  FRAME_TYPE_E tmp_type;
  u8 tmp_length =0;
  u8 total_length = 0;
  u8 i = 0;
  u8 j = 0;
  u8 ret = 0;
  DATA_POINT_S data_point_tmp_out;
  tmp_type = STATE_UPLOAD_CMD;
  
  for(i = 0;i < DPID_UPDATE_NUMBER;i++)
  {
    ret = data_point_update(dpid_arrary[i], &data_point_tmp_out);
    if(SUCCESS == ret)
    {
      tmp_length = char_combine_short(data_point_tmp_out.length[0], data_point_tmp_out.length[1]);
      my_memcpy(tmp_data+j, &data_point_tmp_out,4+tmp_length);
      j = j+ tmp_length+4;
      total_length  = j;
    }
    else
    {
      ;
    }          
  }
  
  wifi_uart_write_frame(tmp_type, total_length, tmp_data);
}

#ifdef SUPPORT_MCU_UPDATE
/*****************************************************************************
函数名称  : mcu_update_query
功能描述  : mcu升级查询
*****************************************************************************/
void mcu_update_query(void)
{
  u8 tmp_data = 0;
  u8 tmp_length = 0;
  
  wifi_uart_write_frame(UPDATE_QUERY_CMD, tmp_length, &tmp_data);
}
#endif


/*****************************************************************************
函数名称  : data_handle
功能描述  : 数据帧处理
输入参数 :
返回参数 :
*****************************************************************************/
static void data_handle(void)
{
#ifdef SUPPORT_MCU_UPDATE
  static u32 up_data_total_length;
  static u32 tmp_total_length;
  //固定包偏移
  u16 data_shift_length = 0;
#endif
  
  u8 tmp_data[32];
  FRAME_TYPE_E tmp_type = (FRAME_TYPE_E)wifi_uart_rx_buf[FRAME_TYPE];
  u32 tmp_length =0;
  DATA_POINT_S data_point_tmp_in;
  DATA_POINT_S data_point_tmp_out;
  u8 i = 0;
  u8 j = 0;
  u32 total_length = 0;
  
  switch (tmp_type)
  {
  case HEAT_BEAT_CMD:
    heat_beat_check();
    break;
    
  case PRODUCT_INFO_CMD:
    product_info_update();
    break;
    
  case WORK_MODE_CMD:
    mcu_wifi_mode();
    break;
    
  case WIFI_STATE_CMD:
    wifi_work_state =(WIFI_WORK_SATE_E)wifi_uart_rx_buf[6];
    wifi_state_mode();
    break;
    
  case WIFI_RESET_CMD:
    reset_wifi_flag = TRUE;
    break;
    
  case WIFI_MODE_CMD:
    //根据实际情况设置
    reset_wifi_config_state = SMART_CONFIG;
    break;
    
  case DATA_QUERT_CMD:
    tmp_type = STATE_UPLOAD_CMD;           
    for(i=DATA_START;i<(UART_HandleStruct.UART_Count-1);){
      data_point_tmp_in.dpid = UART_HandleStruct.wifi_uart_rx_buf[i];
      data_point_tmp_in.data_type = UART_HandleStruct.wifi_uart_rx_buf[i+1];
      data_point_tmp_in.length[0] = UART_HandleStruct.wifi_uart_rx_buf[i+2];
      data_point_tmp_in.length[1] = UART_HandleStruct.wifi_uart_rx_buf[i+3];
      tmp_length = char_combine_short(data_point_tmp_in.length[0],data_point_tmp_in.length[1]);
      my_memcpy(data_point_tmp_in.value, UART_HandleStruct.wifi_uart_rx_buf+i+4,tmp_length);
      i= i + tmp_length+4;
      ret = data_point_handle(&data_point_tmp_in,&data_point_tmp_out);
      if(SUCCESS == ret){
        tmp_length = char_combine_short(data_point_tmp_out.length[0],data_point_tmp_out.length[1]);
        my_memcpy(tmp_data+j, &data_point_tmp_out, tmp_length+4);
        j = j+ tmp_length+4;
        total_length  = j;
      }else{
        ;
      }                
    }
    wifi_uart_write_frame(tmp_type, total_length, tmp_data);
    break;
    
  case STATE_UPLOAD_CMD:
    PR_ERR("do not supply thie type,your cmd_type is STATE_UPLOAD_CMD");
    break;
    
  case STATE_QUERY_CMD:                 //状态查询
    system_data_update();
    break;
    
#ifdef  SUPPORT_MCU_UPDATE
  case UPDATE_QUERY_CMD:
    mcu_ver_state =(MCU_VER_STATE_E)UART_HandleStruct.wifi_uart_rx_buf[DATA_START];
    break;
  case UPDATE_START_CMD:
    tmp_type = UPDATE_START_CMD;
    tmp_length = 0;
    tmp_data[0] = 0;
    up_data_total_length = char_combine_int(UART_HandleStruct.wifi_uart_rx_buf[DATA_START], UART_HandleStruct.wifi_uart_rx_buf[DATA_START + 1],\
      UART_HandleStruct.wifi_uart_rx_buf[DATA_START + 2], UART_HandleStruct.wifi_uart_rx_buf[DATA_START + 3]);
    system_mode = UPDATE_MODE;
    break;
    
  case UPDATE_TRANS_CMD: 
    if(system_mode == UPDATE_MODE){
      tmp_length = char_combine_short(UART_HandleStruct.wifi_uart_rx_buf[LENGTH_HIGH],UART_HandleStruct.wifi_uart_rx_buf[LENGTH_LOW])- 2;
      tmp_total_length = tmp_total_length + tmp_length;
      data_shift_length = char_combine_short(UART_HandleStruct.wifi_uart_rx_buf[DATA_START], UART_HandleStruct.wifi_uart_rx_buf[DATA_START+1]);
      if((tmp_length == 0)&&(data_shift_length >= up_data_total_length)){
        system_mode = NORMAL_MODE;
        tmp_total_length = 0;
        PR_ERR("upgrade is successful");
      }else{
      }
      tmp_data[0] = 0;
      tmp_length = 0;
      tmp_type = UPDATE_TRANS_CMD;     
      wifi_uart_write_frame(tmp_type, tmp_length, tmp_data);
    }
    break;
#endif      
    
  case GET_ONLINE_TIME_CMD:
    if(TRUE == wifi_uart_rx_buf[DATA_START])
    {
      //the user should set time
      mcu_set_rtc();
    }
    break;
    
  case FACTORY_MODE_CMD:
    system_mode = FACTORY_MODE;
    tmp_type = FACTORY_MODE_CMD;
    tmp_length = 0;
    tmp_data[0] = 0;
    wifi_uart_write_frame(FACTORY_MODE_CMD, tmp_length, tmp_data);            
    break;
    
  default:
    break;
  }
}
/***********************通讯协议命令函数end**********************************/

/*****************************************************************************
函数名称  : data_point_update
功能描述  : 上传数据点信息
输入参数 :
返回参数 :
*****************************************************************************/
OPERATE_RET data_point_update(u32 dpid,DATA_POINT_S* data_point_out)
{
  u32 i = 0;
  OPERATE_RET ret;
  switch (dpid){
  case DPID_1:
    data_point_out->dpid = DPID_1;
    data_point_out->data_type = DPID_VALUE_TYPE;
    data_point_out->length[0] = 0x0;
    data_point_out->length[1] = 0x4;
    int2char(test_data_1, data_point_out->value);
    ret = SUCCESS;
    break;
    
  case DPID_2:
    data_point_out->dpid = DPID_2;
    data_point_out->data_type = DPID_VALUE_TYPE;
    data_point_out->length[0] = 0x0;
    data_point_out->length[1] = 0x4;
    int2char(test_data_2, data_point_out->value);
    ret = SUCCESS;
    break;
    
  case DPID_3:
    data_point_out->dpid = DPID_3;
    data_point_out->data_type = DPID_VALUE_TYPE;
    data_point_out->length[0] = 0x0;
    data_point_out->length[1] = 0x4;
    int2char(test_data_3, data_point_out->value);
    ret = SUCCESS;
    break;
    
  case DPID_4:
    data_point_out->dpid = DPID_4;
    data_point_out->data_type = DPID_VALUE_TYPE;
    data_point_out->length[0] = 0x0;
    data_point_out->length[1] = 0x4;
    int2char(test_data_4, data_point_out->value);
    ret = SUCCESS;
    break;
    
  case DPID_5:
    data_point_out->dpid = DPID_5;
    data_point_out->data_type = DPID_BOOL_TYPE;
    data_point_out->length[0] = 0x0;
    data_point_out->length[1] = 0x1;
    data_point_out->value[0] = test_data_5;
    ret = SUCCESS;
    break;
    
  case DPID_6:
    data_point_out->dpid = DPID_6;
    data_point_out->data_type = DPID_BITMAP_TYPE;
    data_point_out->length[0] = 0x0;
    data_point_out->length[1] = 0x1;
    data_point_out->value[0] = test_data_6;
    ret = SUCCESS;
    break;
  case DPID_7:
    data_point_out->dpid = DPID_7;
    data_point_out->data_type = DPID_BOOL_TYPE;
    data_point_out->length[0] = 0x0;
    data_point_out->length[1] = 0x1;
    data_point_out->value[0] = test_data_7;
    ret = SUCCESS;
    break;
    
  case DPID_8:
    data_point_out->dpid = DPID_8;
    data_point_out->data_type = DPID_BOOL_TYPE;
    data_point_out->length[0] = 0x0;
    data_point_out->length[1] = 0x1;
    data_point_out->value[0] = test_data_8;
    ret = SUCCESS;
    break;
    
  case DPID_9:
    data_point_out->dpid = DPID_9;
    data_point_out->data_type = DPID_ENUM_TYPE;
    data_point_out->length[0] = 0x0;
    data_point_out->length[1] = 0x1;
    data_point_out->value[0] = test_data_9;
    ret = SUCCESS;
    break;
    
  case DPID_10:
    data_point_out->dpid = DPID_10;
    data_point_out->data_type = DPID_BOOL_TYPE;
    data_point_out->length[0] = 0x0;
    data_point_out->length[1] = 0x1;
    data_point_out->value[0] = test_data_10;
    ret = SUCCESS;
    break;
    
  default:
    ret = FAILURE;
    break;
  }
  return ret;
}

/*****************************************************************************
函数名称  : data_point_handle
功能描述  : datapoint数据点命令处理
*****************************************************************************/
static OPERATE_RET data_point_handle(DATA_POINT_S * data_point_in, DATA_POINT_S* data_point_out)
{
  OPERATE_RET ret;
  u32 tmp_length = 0;
  tmp_length = char_combine_short(data_point_in->length[0], data_point_in->length[1]);
  switch (data_point_in->dpid){
  case DPID_1:
    if(DPID_VALUE_TYPE != data_point_in->data_type){
      PR_ERR("the data_type is wrong,data type is%d",data_point_in->data_type);
    }else{
      ret = DPID_1_handle(data_point_in->value,tmp_length);
      if(SUCCESS == ret){
        data_point_update(DPID_1, data_point_out);
      }else{
        PR_ERR("the DPID_1_handle is failure");
      }
    }
    break;
    
  case DPID_2:
    if(DPID_VALUE_TYPE != data_point_in->data_type){
      PR_ERR("the data_type is wrong,data type is%d",data_point_in->data_type);
    }else{
      ret = DPID_2_handle(data_point_in->value,tmp_length);
      if(SUCCESS == ret){
        data_point_update(DPID_2, data_point_out);
      }else{
        PR_ERR("the DPID_2_handle is failure");
      }
    }
    break;
    
  case DPID_3:
    if(DPID_VALUE_TYPE != data_point_in->data_type){
      PR_ERR("the data_type is wrong,data type is%d",data_point_in->data_type);
    }else{
      ret = DPID_3_handle(data_point_in->value,tmp_length);
      if(SUCCESS == ret){
        data_point_update(DPID_3, data_point_out);
      }else{
        PR_ERR("the DPID_3_handle is failure");
      }
    }
    break;
    
  case DPID_4:
    if(DPID_VALUE_TYPE != data_point_in->data_type){
      PR_ERR("the data_type is wrong,data type is%d",data_point_in->data_type);
    }else{
      ret = DPID_4_handle(data_point_in->value,tmp_length);
      if(SUCCESS == ret){
        data_point_update(DPID_4, data_point_out);
      }else{
        PR_ERR("the DPID_4_handle is failure");
      }
    }
    break;
    
  case DPID_7:
    if(DPID_BOOL_TYPE != data_point_in->data_type){
      PR_ERR("the data_type is wrong,data type is%d",data_point_in->data_type);
    }else{
      ret = DPID_7_handle(data_point_in->value,tmp_length);
      if(SUCCESS == ret){
        data_point_update(DPID_7, data_point_out);
      }else{
        PR_ERR("the DPID_7_handle is failure");
      }
    }
    break;
    
  case DPID_8:
    if(DPID_BOOL_TYPE != data_point_in->data_type){
      PR_ERR("the data_type is wrong,data type is%d",data_point_in->data_type);
    }else{
      ret = DPID_8_handle(data_point_in->value,tmp_length);
      if(SUCCESS == ret){
        data_point_update(DPID_8, data_point_out);
      }else{
        PR_ERR("the DPID_8_handle is failure");
      }
    }
    break;
    
  case DPID_9:
    if(DPID_ENUM_TYPE != data_point_in->data_type){
      PR_ERR("the data_type is wrong,data type is%d",data_point_in->data_type);
    }else{
      ret = DPID_9_handle(data_point_in->value,tmp_length);
      if(SUCCESS == ret){
        data_point_update(DPID_9, data_point_out);
      }else{
        PR_ERR("the DPID_9_handle is failure");
      }
    }
    break;
    
  case DPID_10:
    if(DPID_BOOL_TYPE != data_point_in->data_type){
      PR_ERR("the data_type is wrong,data type is%d",data_point_in->data_type);
    }else{
      ret = DPID_10_handle(data_point_in->value,tmp_length);
      if(SUCCESS == ret){
        data_point_update(DPID_10, data_point_out);
      }else{
        PR_ERR("the DPID_10_handle is failure");
      }
    }
    break;
    
  default:
    ret = FAILURE;
    break;
    
  }
  return ret;
}



