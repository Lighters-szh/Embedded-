

//
#include        "include.h"
#include        "wifi.h"

//#define         DEBUG_IN_USART1

/*****************************************************************************
函数名称 : USART1_Init
功能描述 : USART1初始化
输入参数 : BaudRate:波特率
返回参数 : 初始化成功/失败
使用说明 : 无
*****************************************************************************/
uint8_t USART1_Init(uint32_t BaudRate)
{
  USART_InitTypeDef USART_InitStructure; 
  GPIO_InitTypeDef GPIO_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  
  if(BaudRate > 115200) 
  {                                            //波特率太高，错误返回
    return(ERROR);
  }
  
  // Enable GPIOA clocks 
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
  // Enable USART1 clocks 
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
  
  /*
  *  USART1_TX -> PA9 , USART1_RX -> PA10
  */				
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;	         
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
  GPIO_Init(GPIOA, &GPIO_InitStructure);		   
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;	        
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  //
  USART_InitStructure.USART_BaudRate = BaudRate;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_Init(USART1, &USART_InitStructure); 
  //
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
  USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
  //
  USART_ClearFlag(USART1,USART_FLAG_TC);
  
  //Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;                             //指定中断源
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;                     //抢占优先级
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;                            //指定响应优先级别
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;                               //允许中断
  NVIC_Init(&NVIC_InitStructure);                                               //写入设置
  
  USART_Cmd(USART1, ENABLE);
  
  return(SUCCESS);
}
/*****************************************************************************
函数名称 : USART3_Init
功能描述 : USART3初始化
输入参数 : BaudRate:波特率
返回参数 : 初始化成功/失败
使用说明 : 无
*****************************************************************************/
uint8_t USART3_Init(uint32_t BaudRate)
{
  USART_InitTypeDef USART_InitStructure; 
  GPIO_InitTypeDef GPIO_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  
  if(BaudRate > 115200) 
  {                                            //波特率太高，错误返回
    return(ERROR);
  }
  
  // Enable GPIOA clocks 
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
  // Enable USART1 clocks 
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
  
  /*
  *  USART3_TX -> PB10 , USART13_RX -> PB11
  */				
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;	         
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
  GPIO_Init(GPIOB, &GPIO_InitStructure);		   
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;	        
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
  GPIO_Init(GPIOB, &GPIO_InitStructure);
  //
  USART_InitStructure.USART_BaudRate = BaudRate;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_Init(USART3, &USART_InitStructure); 
  //
  USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
  USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
  //
  USART_ClearFlag(USART3,USART_FLAG_TC);
 
  //Enable the USART3 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;                             //指定中断源
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;                     //抢占优先级
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;                            //指定响应优先级别
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;                               //允许中断
  NVIC_Init(&NVIC_InitStructure);                                               //写入设置
  
  USART_Cmd(USART3, ENABLE);
  
  return(SUCCESS);
}
/*****************************************************************************
函数名称 : RCC_Configuration
功能描述 : 时钟配置
输入参数 : 无
返回参数 : 无
使用说明 : 无
*****************************************************************************/
void RCC_Configuration(void)
{
  //TIM1 clock enable
//  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE); 
  //TIM2 | TIM3 clock enable
//  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4, ENABLE);
  
  //启动DMA时钟 
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);  
  
  //Enable AFIO clocks
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
  
  //使能JTAG口作为GPIO  
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
}
/*****************************************************************************
函数名称 : NVIC_Configuration
功能描述 : NVIC配置
输入参数 : 无
返回参数 : 无
使用说明 : 无
*****************************************************************************/
void NVIC_Configuration(void)
{
  
  //Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 
#ifdef DEBUG_IN_USART1
#else
#endif
}
/*****************************************************************************
函数名称 : USART1_IRQHandler
功能描述 : USART1串口中断函数
输入参数 : 无
返回参数 : 无
使用说明 : 无
*****************************************************************************/
void USART1_IRQHandler(void)
{
  uint8_t ch;

  //接收中断
  if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
  {
    ch = USART_ReceiveData(USART1);
  
#ifdef DEBUG_IN_USART1
    //将接收到字节数据传入uart_receive_input
    uart_receive_input(ch);
#endif
  }
}
/*****************************************************************************
函数名称 : USART1_IRQHandler
功能描述 : USART1串口中断函数
输入参数 : 无
返回参数 : 无
使用说明 : 无
*****************************************************************************/
void USART3_IRQHandler(void)
{
  uint8_t ch;

  //接收中断
  if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
  {
    ch = USART_ReceiveData(USART3);
  
#ifndef DEBUG_IN_USART1
    //将接收到字节数据传入uart_receive_input
    uart_receive_input(ch);
#endif
  }
}
/*****************************************************************************
函数名称 : Uart_PutChar
功能描述 : 串口发送函数
输入参数 : ch:待发送数据
返回参数 : 无
使用说明 : 无
*****************************************************************************/
void Uart_PutChar(uint8_t ch)
{
#ifdef DEBUG_IN_USART1
  //发送
  USART_SendData(USART1,ch);
  //
  while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
#else
  //发送
  USART_SendData(USART3,ch);
  //
  while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
#endif
}
/*****************************************************************************
函数名称 : Bsp_Init
功能描述 : 外设初始化
输入参数 : 无
返回参数 : 无
使用说明 : 无
*****************************************************************************/
void Bsp_Init(void)
{
#ifdef DEBUG_IN_USART1
  USART1_Init(9600);
#else
  USART3_Init(9600);
#endif  
  
  //
  RGB_LED_Init();
  /*
  //
  AD_Init();
  //
  LED_GPIO_Init();
  //
  KEY_GPIO_Init();
  //
  Motor_Init();
  */
}
/*****************************************************************************
函数名称 : main
功能描述 : 主函数
输入参数 : 无
返回参数 : 无
使用说明 : 无
*****************************************************************************/
void main(void)
{
  uint32_t t,i;
  uint8_t flag = 0;

  RCC_Configuration();

  NVIC_Configuration();

  Bsp_Init();
  
  //调用wifi初始化  
  wifi_protocol_init();
  
  i = 0;
  t = 0;
  while(1)
  {
    wifi_uart_service();
    i++;
    if(i == 0x100)
    {
      t ++;
      i = 0;
      if(t == 0x1000)
      {
        t = 0;
        flag = 1;
      }
    }

    if(flag == 1)
    {
//    if(mcu_get_firm_update_state() != FIRM_STATE_START)
    {
//     firm_update_query_handle();
    }	
    flag = 0;

     all_data_update();
    }
  }
}